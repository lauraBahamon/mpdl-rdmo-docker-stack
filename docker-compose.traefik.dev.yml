services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - static_volume:/home/rdmo/rdmo-app/static_root
      - vendor_volume:/home/rdmo/rdmo-app/vendor
    expose:
     - 8000
    env_file:
      - dev.env
    depends_on:
      db:
        condition: service_healthy
        restart: true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dev-rdmo.rule=Host(`dev-rdmo.int.mpdl.mpg.de`)"
      - "traefik.http.routers.dev-rdmo.tls=true"
      - "traefik.http.routers.dev-rdmo.tls.certresolver=letsencrypt"

  db: # defaults to sqlite
    image: "postgres:17"
    restart: always
    expose:
      - 5432
    volumes:
      - pgdata:/var/lib/postgresql/data
    env_file:
      - dev.env
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}" ]
      interval: 2s
      timeout: 5s
      retries: 10

  traefik:
    build: ./traefik
    ports:
      - 80:80
      - 443:443
    volumes:
      # - "./traefik/traefik.test.toml:/etc/traefik/traefik.toml"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/traefik-public-certificates:/certificates"
    env_file:
      - dev.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.dev-rdmo.int.mpdl.mpg.de`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${DASHBOARD_USER}:${DASHBOARD_PASSWORD}"

volumes:
  pgdata:
  static_volume:
  vendor_volume:
  traefik-public-certificates: